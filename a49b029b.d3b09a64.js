(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{122:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return b}));var n=a(2),r=a(6),o=(a(0),a(139)),c={id:"js4",title:"Making Decisions in JS",sidebar_label:"Program Logic and Control Flow"},l={id:"jsbootcamp/js4",title:"Making Decisions in JS",description:"Comparision operators",source:"@site/docs/jsbootcamp/js4.md",permalink:"/notebook/docs/jsbootcamp/js4",editUrl:"https://github.com/savithagollamudi/notebook/tree/master/notes-website/docs/jsbootcamp/js4.md",sidebar_label:"Program Logic and Control Flow",sidebar:"someSidebar",previous:{title:"Modelling data efficiently",permalink:"/notebook/docs/jsbootcamp/js3"},next:{title:"Capture collections of Data with Arrays",permalink:"/notebook/docs/jsbootcamp/js5"}},i=[{value:"Comparision operators",id:"comparision-operators",children:[]},{value:"== vs ===",id:"-vs-",children:[]},{value:"conditional statements",id:"conditional-statements",children:[{value:"if-else",id:"if-else",children:[]},{value:"else if",id:"else-if",children:[]}]},{value:"Truthy and Falsy values",id:"truthy-and-falsy-values",children:[{value:"Type coercion",id:"type-coercion",children:[]}]},{value:"Logical operators",id:"logical-operators",children:[]},{value:"Operator Precedence",id:"operator-precedence",children:[]},{value:"Switch statement",id:"switch-statement",children:[]},{value:"Ternary Operator",id:"ternary-operator",children:[]}],s={rightToc:i};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"comparision-operators"},"Comparision operators"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},">, <, >=, <=, ==, !=, ===,!==")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"-vs-"},"== vs ==="),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"=="),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"==="))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"checks for ",Object(o.b)("em",{parentName:"td"},"equality of value"),", but not equality of type"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"checks for ",Object(o.b)("em",{parentName:"td"},"equality of value and type"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"converts(coerces) both values to same type & then compare them"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"eg: 5==5 //True 'b' == 'c' //false 7 == '7' //true 0==''//true true==false//false 0==false//true null==undefined//true 10!='10' //false"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"5===5 //true 1===2 //false 2==='2' //false false === 0//false 10 !== '10' //true")))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"conditional-statements"},"conditional statements"),Object(o.b)("h3",{id:"if-else"},"if-else"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"if (cipher_char === from_char) {\n  result = result + to_char;\n  x++;\n} else {\n  result = result + clear_char;\n}\n")),Object(o.b)("h3",{id:"else-if"},"else if"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"if (x > 50) {\n  /* do something */\n} else if (x > 5) {\n  /* do something */\n} else {\n  /* do something */\n}\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"truthy-and-falsy-values"},"Truthy and Falsy values"),Object(o.b)("p",null,"All values have an inherit truthy or falsy boolean values."),Object(o.b)("p",null,'In JavaScript, a truthy value is a value that is considered true when encountered in a Boolean context. All values are truthy unless they are defined as falsy (i.e., except for false, 0, -0, 0n, "", null, undefined, and NaN).'),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"JavaScript uses type coercion in Boolean contexts.")),Object(o.b)("h3",{id:"type-coercion"},"Type coercion"),Object(o.b)("p",null,"Type conversion (or typecasting) means transfer of data from one data type to another."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Implicit")," conversion happens when the compiler automatically assigns data types, but the source code can also ",Object(o.b)("em",{parentName:"p"},"explicitly")," require a conversion to take place."),Object(o.b)("p",null,'For example, given the instruction 5+2.0, the floating point 2.0 is implicitly typecasted into an integer, but given the instruction Number("0x11"), the string "0x11" is explicitly typecasted as the number 17.'),Object(o.b)("hr",null),Object(o.b)("h2",{id:"logical-operators"},"Logical operators"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"&&, ||, !")," -> logical operators"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const a = 3;\nconst b = -2;\nconsole.log(a > 0 && b > 0);\n// expected output: false\nconsole.log(a > 0 || b > 0);\n// expected output: true\nconsole.log(!(a > 0 || b > 0));\n// expected output: false\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"operator-precedence"},"Operator Precedence"),Object(o.b)("p",null,"Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence."),Object(o.b)("p",null,"in case of logical operators.\n",Object(o.b)("inlineCode",{parentName:"p"},"! > && > ||")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"For more visit ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"}),"Operator Precedence"))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"switch-statement"},"Switch statement"),Object(o.b)("p",null,"The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const expr = "Papayas";\nswitch (expr) {\n  case "Oranges":\n    console.log("Oranges are $0.59 a pound.");\n    break;\n  case "Mangoes":\n  case "Papayas":\n    console.log("Mangoes and papayas are $2.79 a pound.");\n    // expected output: "Mangoes and papayas are $2.79 a pound."\n    break;\n  default:\n    console.log(`Sorry, we are out of ${expr}.`);\n}\n')),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Refer MDN Docs for more ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"}),"Switch"))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"ternary-operator"},"Ternary Operator"),Object(o.b)("p",null,"Syntax:"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Condition ? expressionIfTRUE : expressionIfFalse")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'let color = status === "offline" ? "red" : "green";\n')))}b.isMDXComponent=!0},139:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=b(a),d=n,m=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return a?r.a.createElement(m,l(l({ref:t},s),{},{components:a})):r.a.createElement(m,l({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,c=new Array(o);c[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var s=2;s<o;s++)c[s]=a[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);